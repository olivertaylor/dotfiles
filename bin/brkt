#!/usr/bin/ruby

ARGF.set_encoding(Encoding::UTF_8)
input = ARGF.read

# NOTE: brkt does not handle nested markup, or multi-line markup

# COMMENTS
# {comment foo} => <!-- foo -->
# {! foo} => <!-- foo -->
input = input.gsub(/(?<!\\){(comment|!):?[ \t]+(.+?)(?<!\\)}/, '<!-- \2 -->')

# SPECIAL
# {break} => <div class="break"></div>
# {code foo} => <code>foo</code>
input = input.gsub(/^\s*{break}\s*$/, "\n<div class=\"break\"></div>\n")
input = input.gsub(/(?<!\\){(code):?[ \t]+(.+?)(?<!\\)}/, '<code>\2</code>')

# ARBITRARY
# {bar foo} => <span class="bar">foo</span>
input = input.gsub(/(?<!\\){(\w+):?[ \t]+(.+?)(?<!\\)}/, '<span class="\1">\2</span>')

# Images
# {img /path/to/img.jpg} => <img src="/path/to/img.jpg" />
# {/path/to/img.jpg} => <img src="/path/to/img.jpg" />
input = input.gsub(/(?<!\\){img:?[ \t]+(.+?)(?<!\\)}/, '<img src="\1" />')
input = input.gsub(/(?<!\\){(\S+?).(jpg|png|gif)(?<!\\)}/, '<img src="\1" />')

# ESCAPED
# \{foo\} => {foo}
input = input.gsub(/\\([{}])/, '\1')

# Finally, print it all
print input
