" {{{ Plugins
" ------------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')
    Plug 'Shougo/unite.vim'
    Plug 'Shougo/unite-outline'
    Plug 'kopischke/unite-spell-suggest'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-commentary'
    Plug 'plasticboy/vim-markdown'
    Plug 'thinca/vim-ft-markdown_fold'
    Plug 'junegunn/vim-easy-align'
    Plug 'mbbill/undotree'
    Plug 'gerw/vim-HiLinkTrace'
    Plug 'gcmt/taboo.vim'
    Plug 'osyo-manga/vim-over'
    Plug 'wellle/visual-split.vim'
    Plug 'kshenoy/vim-signature'
    Plug 'wellle/vim-visual-star-search'
    Plug 'haya14busa/incsearch.vim'
    Plug 'jceb/vim-orgmode'
call plug#end()

" }}}
" {{{ Settings
" ------------------------------------------------------------------------------

syntax enable
colorscheme oliver.light

" Each machine has settings specific to it
source $DOT/vim/localvimrc

set backspace=start,indent,eol
set clipboard=unnamed
set encoding=utf-8
set formatoptions=tcrqn1j formatprg=par\ -w78rq nojoinspaces
set hidden
set incsearch ignorecase
set laststatus=2 showcmd
set listchars=tab:▸\ ,eol:¬,trail:◯,extends:→,precedes:←,nbsp:╌
set scrolloff=0 sidescrolloff=5
set shortmess+=I
set smartindent autoindent
set spellfile=~/.vim/custom-dictionary.utf-8.add
set spelllang=en_us
set splitbelow splitright
set statusline=%f\ %m\ %=\ %y\ %l\:%c\ %P
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set thesaurus+=/Users/oliver/code/mthesaur.txt
set undofile undodir=~/code/vimundo
set wildmenu wildmode=list:longest
set wrap linebreak breakindent
set wrapscan

" Switch from block-cursor to vertical-line-cursor when going into/out of
" insert mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" }}}
" {{{ Mappings
" ------------------------------------------------------------------------------

let mapleader = " "

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Swap key to enter Ex mode
" in Visual, Select, and Operator-pending modes:
noremap ; :
noremap : ;

" In Visual Mode I almost never want $ to select the newline
noremap $ g_

"  Make Y behave like D
nnoremap Y y$

" Break undo before CTRL-U
inoremap <C-U> <C-G>u<C-U>

" Instead of using man for word lookups, use the OSX dictionary
nnoremap K :!open dict:///<cword><cr>

" Convert sentence junctions
nnoremap gc. r.wvUb
nnoremap gc, r,wvub
nnoremap gc; r;wvub
nnoremap gc- s -<esc>wvub
xnoremap gc. s.<esc>wvUb
xnoremap gc, s,<esc>wvub
xnoremap gc; s;<esc>wvub

" Maintain selection on in/de-dent
xnoremap > >gv
xnoremap < <gv

" Quickly go to next/previous buffer
nnoremap gb :bnext<cr>
nnoremap gB :bNext<cr>

" Call custom command
vnoremap gcb :Break<cr>
nnoremap gcb V:Break<cr>

" }}}
" {{{ Commands
" ------------------------------------------------------------------------------

" Never use a mapping when a command wil do! This is Vim!
command! -range Break :'<,'>!clause-break
command! Cdf :cd %:h<cr>
command! Dtrail :%s/\s\+$//
command! -range Join :'<,'>!clause-join
command! MM :call Markdown()
command! H1 :normal VUyypVr=
command! H2 :normal yypVr-
command! NN :set number!
command! NR :set relativenumber!
command! PP :set paste! | set paste?
command! SS :set spell! | set spell?
command! Src :source $MYVIMRC
command! Erc :e $MYVIMRC
command! Ecolo :e ~/code/dotfiles/vim/colors/oliver.light.vim
command! WW :set wrap!
command! UT :UndotreeToggle

" allow saving a sudo file if forgot to open as sudo
    cmap w!! w !sudo tee % >/dev/null
" creates an alias (%%) to represent the directory of the current file
    cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>

" }}}
" {{{ Leader Mappings
" ------------------------------------------------------------------------------

nnoremap <leader>e :Unite -buffer-name=edit -no-split -no-resize buffer file file/new directory/new<cr>
nnoremap <leader>u <nop>
nnoremap <leader>us :Unite -buffer-name=source -no-split -no-resize source<cr>
nnoremap <leader>ul :Unite -buffer-name=line -no-split -no-resize line<cr>
nnoremap <leader>uo :Unite -buffer-name=outline -no-split -no-resize outline<cr>
nnoremap <leader>ur :Unite -buffer-name=register -no-split -no-resize register<cr>

" }}}
" {{{ Functions
" ------------------------------------------------------------------------------

function! Markdown()
    setlocal spell filetype=markdown syntax=markdown
endfunction

function! InsertEnter()
    set timeoutlen=0
    set linebreak
    highlight StatusLine ctermfg=002
endfunction

function! InsertLeave()
    set timeoutlen=3000
    set linebreak
    highlight StatusLine ctermfg=004
endfunction

" }}}
" {{{ Autocommands
" ------------------------------------------------------------------------------

augroup markdown
    autocmd!
    autocmd BufRead,BufNewFile *.text,*.md call Markdown()
augroup END

augroup custom_misc
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd BufWritePre /Volumes/secret_files/* setlocal noundofile
    autocmd InsertEnter * call InsertEnter()
    autocmd InsertLeave * call InsertLeave()
augroup END

" }}}
" {{{ Better Folds
" ------------------------------------------------------------------------------

function! MyFoldText()
    let line = getline(v:foldstart)
    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 4
    let foldedlinecount = v:foldend - v:foldstart
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')
    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 0
    return '↕ ' . line . '... ' . repeat(' ',fillcharcount) " . ' (' . foldedlinecount . ') '
endfunction
set foldtext=MyFoldText()

" }}}
" {{{ Plugin Prefs
" ------------------------------------------------------------------------------

" UNITE
    " Start by setting some defaults
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    call unite#filters#sorter_default#use(['sorter_selecta'])

    let g:unite_source_history_yank_enable = 1

    augroup unite
        autocmd!
        autocmd FileType unite setlocal cursorline
    augroup END

    " shortcuts for calling Unite
    nnoremap = :Unite -buffer-name=spelling -no-split -no-resize spell_suggest<cr>

" MARKDOWN
    " Disable vim-markdown's folding in favor of thinca/vim-ft-markdown_fold
    let g:vim_markdown_folding_disabled=1

" GITGUTTER
    nmap [h <Plug>GitGutterPrevHunk
    nmap ]h <Plug>GitGutterNextHunk

" EASY ALIGN
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

" TABOO
    let g:taboo_tab_format=" %N: %f%m "
    let g:taboo_modified_tab_flag=" +"

" Incsearch
    set hlsearch
    let g:incsearch#auto_nohlsearch = 1
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
    map n  <Plug>(incsearch-nohl-n)
    map N  <Plug>(incsearch-nohl-N)
    map *  <Plug>(incsearch-nohl-*)
    map #  <Plug>(incsearch-nohl-#)
    map g* <Plug>(incsearch-nohl-g*)
    map g# <Plug>(incsearch-nohl-g#)

" }}}
" {{{ Snippets
" ------------------------------------------------------------------------

" Date: 2015-02-15
iabbrev <expr> dd strftime("%Y-%m-%d")
" Date: 16 February 2015
iabbrev <expr> ddate strftime("%d %B %Y")

" }}}
