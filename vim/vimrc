" {{{ Plugins & Plugin Settings
" ------------------------------------------------------------------------------

" This has to come before any mappings with <leader>
let mapleader = ','

" This automatically installs vim-plug, and all your plugins
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'mbbill/undotree'
Plug 'gcmt/taboo.vim'
    let g:taboo_tab_format=" %N: %f%m "
    let g:taboo_modified_tab_flag=" +"
Plug 'junegunn/vim-slash'
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/goyo.vim'
    let g:goyo_width = 100
    let g:goyo_height = "100%"
    nnoremap <leader>g :Goyo<cr>
Plug 'junegunn/fzf.vim'
    set rtp+=/usr/local/opt/fzf
    " Lines in current buffer
    nnoremap <leader>l :BLines<cr>
    " Lines in loaded buffers
    nnoremap <leader>L :Lines<cr>
    " Files in dir
    nnoremap <leader>f :Files<cr>
    " Lines in all files in dir
    nnoremap <leader>a :Ag<cr>
    nnoremap <leader>b :Buffers<cr>
    nnoremap <leader>h :Helptags<cr>
    nnoremap <leader>c :Colors<cr>
    nnoremap <leader>t :Filetypes<cr>
    nnoremap <leader><space> :Commands<cr>

    imap <c-x><c-k> <plug>(fzf-complete-word)
    imap <c-x><c-f> <plug>(fzf-complete-path)
    imap <c-x><c-j> <plug>(fzf-complete-file-ag)
    imap <c-x><c-l> <plug>(fzf-complete-line)

    function! SearchWordWithAg()
        execute 'Ag' expand('<cword>')
    endfunction

    function! SearchVisualSelectionWithAg() range
        let old_reg = getreg('"')
        let old_regtype = getregtype('"')
        let old_clipboard = &clipboard
        set clipboard&
        normal! ""gvy
        let selection = getreg('"')
        call setreg('"', old_reg, old_regtype)
        let &clipboard = old_clipboard
        execute 'Ag' selection
    endfunction

    nnoremap <silent> K :call SearchWordWithAg()<CR>
    vnoremap <silent> K :call SearchVisualSelectionWithAg()<CR>

Plug 'tweekmonster/spellrotate.vim'
    nmap <silent> zn <Plug>(SpellRotateForward)
    nmap <silent> zN <Plug>(SpellRotateBackward)
    vmap <silent> zn <Plug>(SpellRotateForwardV)
    vmap <silent> zN <Plug>(SpellRotateBackwardV)
Plug 'Konfekt/FastFold'
Plug 'atimholt/spiffy_foldtext'
    let g:SpiffyFoldtext_format = "%c{=}...%<%f{ }%l{+}"
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-dispatch'
Plug 'gerw/vim-HiLinkTrace'

" ----- Languages -----

Plug 'plasticboy/vim-markdown'
    " Disable vim-markdown's folding in favor of thinca/vim-ft-markdown_fold
    let g:vim_markdown_folding_disabled=1
    " Disable ge mapping
    map <Plug> <Plug>Markdown_EditUrlUnderCursor
    let g:vim_markdown_toc_autofit = 1
Plug 'thinca/vim-ft-markdown_fold'

" ----- Colors -----

Plug '~/code/vacme/'
Plug '~/code/baselight/'

Plug 'junegunn/seoul256.vim'
    let g:seoul256_light_background = 255
    let g:seoul256_background = 238
Plug 'morhetz/gruvbox'
    let g:gruvbox_contrast_dark = 'soft'
    let g:gruvbox_contrast_light = 'hard'
    let g:gruvbox_italic = 1
Plug 'romainl/Apprentice'
Plug 'jeetsukumaran/vim-nefertiti'
Plug 'w0ng/vim-hybrid'
Plug 'ajmwagar/vim-dues'

call plug#end()

" }}}
" {{{ Colors
" ------------------------------------------------------------------------------

syntax enable
set encoding=utf-8

if has('termguicolors') && $TERM_PROGRAM == 'iTerm.app'
    set termguicolors
    colorscheme baselight
else
    colorscheme vacme
endif


" }}}
" {{{ Settings
" ------------------------------------------------------------------------------

" Each machine has settings specific to it
source ~/code/private-dotfiles/vimrc

set backspace=indent,eol,start
set formatoptions=croqn1jl formatprg=par\ -w78rq nojoinspaces
set foldlevelstart=99
set hidden confirm
set incsearch ignorecase gdefault
set laststatus=2 showcmd noshowmode
set listchars=tab:▶\ ,eol:¬,trail:¿,extends:⟩,precedes:⟨,nbsp:╌
set mouse=n
set scrolloff=0 sidescrolloff=5
set shortmess+=I
set spellfile=~/.vim/custom-dictionary.utf-8.add
set spelllang=en_us
set splitbelow splitright
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set notimeout ttimeout
set timeoutlen=1000 ttimeoutlen=0
set undofile undodir=~/code/vimundo
set wildmenu wildmode=longest:full
set wrap linebreak breakindent
set wrapscan
set nostartofline

" Enter command-mode with <space>
noremap <space> :

" Set proper italic escape-codes
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

" Break undo before CTRL-U
inoremap <C-U> <C-G>u<C-U>

" Instead of using man for word lookups, use the OSX dictionary
" nnoremap K :!open dict:///<cword><cr>

" Maintain selection on in/de-dent
xnoremap > >gv
xnoremap < <gv

" In Visual Mode I almost never want $ to select the newline
noremap $ g_

" Use 'gk' for k, unless a count is given. Useful for relative numbered lines.
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')

" Remap U to redo
nnoremap U <c-r>

" }}}
" {{{ Status Line
" ------------------------------------------------------------------------------
 
" Start by linking the modes defined in g:mode_map
" to things likely to be in all colorschemes
highlight link NormalMode  StatusLine
highlight link InsertMode  PmenuSel
highlight link VisualMode  IncSearch
highlight link ReplaceMode Error
highlight link CommandMode Search

" Create a map of modes to highlight groups
let g:mode_map = {
      \ 'n':  ['NORMAL',  'NormalMode' ], 'no':     ['PENDING', 'NormalMode' ], 'v': ['VISUAL',  'VisualMode' ],
      \ 'V':  ['V-LINE',  'VisualMode' ], "\<c-v>": ['V-BLOCK', 'VisualMode' ], 's': ['SELECT',  'VisualMode' ],
      \ 'S':  ['S-LINE',  'VisualMode' ], "\<c-s>": ['S-BLOCK', 'VisualMode' ], 'i': ['INSERT',  'InsertMode' ],
      \ 'R':  ['REPLACE', 'ReplaceMode'], 'Rv':     ['REPLACE', 'ReplaceMode'], 'c': ['COMMAND', 'CommandMode'],
      \ 'cv': ['COMMAND', 'CommandMode'], 'ce':     ['COMMAND', 'CommandMode'], 'r': ['PROMPT',  'CommandMode'],
      \ 'rm': ['-MORE-',  'CommandMode'], 'r?':     ['CONFIRM', 'CommandMode'], '!': ['SHELL',   'CommandMode'],
      \ 't':  ['TERMINAL', 'CommandMode']}

" This updates the line highlight when you change modes
fun! s:updateStatusLineHighlight(newMode)
  execute 'hi! link CurrMode' get(g:mode_map, a:newMode, ["", a:newMode])[1]
  return 1
endf

" This sets things up for highlighting the active window
fun! SetupStl(nr)
  " In a %{} context, winnr() always refers to the window to which the status line being drawn belongs.
  return get(extend(w:, {
        \ "lf_active": winnr() != a:nr
          \ ? 0
          \ : (mode(1) ==# get(g:, "lf_cached_mode", "")
            \ ? 1
            \ : s:updateStatusLineHighlight(get(extend(g:, { "lf_cached_mode": mode(1) }), "lf_cached_mode"))
            \ ),
        \ "lf_winwd": winwidth(winnr())
        \ }), "", "")
endf


function! BuildStatusLine(nr)
    return '%{SetupStl('.a:nr.')}
    \%#CurrMode#%{w:["lf_active"] ? "  " . get(g:mode_map, mode(1), [mode(1)])[0] . (&paste ? " PASTE " : " ") : ""}%*
    \ %f %M %=
    \ %{&spell ? "SPELL " : "" }%y ¶ %l,%c%V %P %* '
endfunction

set statusline=%!BuildStatusLine(winnr())

" }}}
" {{{ Mappings
" ------------------------------------------------------------------------------

" Convert sentence junctions
nnoremap gc. r.wvUb
nnoremap gc, r,wvub
nnoremap gc; r;wvub
nnoremap gc- s -<esc>wvub
xnoremap gc. s.<esc>wvUb
xnoremap gc, s,<esc>wvub
xnoremap gc; s;<esc>wvub

" Mappings/Commands for 'clause-break' & 'clause-join'
vnoremap gcb :Break<cr>
nnoremap gcb V:Break<cr>
command! -range Break :'<,'>!clause-break
vnoremap gcj :Join<cr>
nnoremap gcj V:Join<cr>
command! -range Join :'<,'>!clause-join

" Mappings/Commands for 'titlecase.pl'
vnoremap gct :Title<cr>
nnoremap gct V:Title<cr>
command! -range Title :'<,'>!titlecase.pl

" Quickly go to next/previous tab/buffer/window/quickfix/jump
nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>
nnoremap ]t :tabn<cr>
nnoremap [t :tabp<cr>
nnoremap [w <c-w>W
nnoremap ]w <c-w>w
nnoremap [q :cN<cr>
nnoremap ]q :cn<cr>
nnoremap [j <c-o>
nnoremap ]j <c-i>

" Use the above mappings instead...
nnoremap <c-o> <nop>
nnoremap <c-i> <nop>
" ...and that frees up <tab> because terms see <c-i> and <tab> as the same
nnoremap <tab> <c-w><c-w>

" Move lines
nnoremap <c-k> :<c-u>execute 'move .' . '--' . v:count1<cr>
nnoremap <c-j> :<c-u>execute 'move .' . '+' . v:count1<cr>
xnoremap <c-k> :<c-u>execute "'<,'>move'<--" . v:count1<cr>gv
xnoremap <c-j> :<c-u>execute "'<,'>move'>+" . v:count1<cr>gv

" Toggle relativenumber
nnoremap <leader>n :set relativenumber!<cr>
nnoremap <leader>N :set number!<cr>

" Select last pasted text
nnoremap gV `[v`]

" Correct Spelling in Insert Mode
imap <c-f> <c-g>u<Esc>[s1z=`]a<c-g>u

" Easy yank-put from system clipboard
nnoremap <Leader>p "*p
nnoremap <Leader>P "*P
nnoremap <Leader>y "*y
nnoremap <Leader>Y "*y$
nnoremap <Leader>d "*d
nnoremap <Leader>D "*D
vnoremap <Leader>p "*p
vnoremap <Leader>P "*P
vnoremap <Leader>y "*y
vnoremap <Leader>Y "*y$
vnoremap <Leader>d "*d
vnoremap <Leader>D "*D

" }}}
" {{{ Commands
" ------------------------------------------------------------------------------

" Never use a mapping when a command will do! This is Vim!
command! BGT :call BackgroundToggle()
command! MM :call Markdown()
command! H1 :normal yypVr=
command! H2 :normal yypVr-
command! PP :set paste! | set paste?
command! SS :set spell! | set spell?
command! Src :source $MYVIMRC | :echom "vimrc reloaded!"
command! Erc :e $MYVIMRC
command! Wrc :w | :source $MYVIMRC | :echom "vimrc saved and reloaded!"
command! WW :set wrap!
command! UT :UndotreeToggle
command! TODO vimgrep TODO % | cw
command! GLTODO vimgrep TODO ~/Dropbox/life.text ~/code/notes/code.text ~/Dropbox/ingenuity/ingenuity.text | cw
command! DATES vimgrep /\v<\d{4}-\d{2}-\d{2}>/j % | cw

" allow saving a sudo file if forgot to open as sudo
cmap w!! w !sudo tee % >/dev/null
" creates an alias (%%) to represent the directory of the current file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>

" }}}
" {{{ Autocommands & Functions
" ------------------------------------------------------------------------------

augroup custom_misc
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker nowrap
    autocmd Filetype rst setlocal foldmethod=expr
    autocmd FileType gitcommit setlocal spell
    autocmd BufWritePre /Volumes/secret_files/* setlocal noundofile
    autocmd BufRead,BufNewFile *.text,*.md setlocal spell filetype=markdown syntax=markdown
    autocmd ColorScheme * call CustomizeColors()
augroup END

function! CustomizeColors()
    if (g:colors_name == 'vacme')
        highlight link NormalMode  StatusLine
        highlight link InsertMode  PMenuSel
        highlight link VisualMode  Visual
        highlight link ReplaceMode Error
        highlight link CommandMode Search
    elseif (g:colors_name == 'dues')
        highlight link NormalMode  StatusLine
        highlight link InsertMode  DiffAdd
        highlight link VisualMode  DiffText
        highlight link ReplaceMode DiffDelete
        highlight link CommandMode PmenuSel
    end
endfunction

function! Markdown()
    setlocal spell
    setlocal filetype=markdown
    setlocal syntax=markdown
endfunction

function! BackgroundToggle()
    if (&background == 'dark')
        set background=light
    else
        set background=dark
    endif
endfunction

" }}}
" {{{ Abbreviations
" ------------------------------------------------------------------------------

inoreabbrev <expr> #!! "#!/usr/bin/env" . (empty(&filetype) ? '' : ' '.&filetype)

" }}}
