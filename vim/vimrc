" {{{ Plugins
" ------------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'mbbill/undotree'
Plug 'gcmt/taboo.vim'
Plug 'osyo-manga/vim-over'
Plug 'tommcdo/vim-lion'
Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-oblique'
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/fzf.vim'
Plug 'kshenoy/vim-signature'
Plug 'tweekmonster/spellrotate.vim'
Plug 'Konfekt/FastFold'
Plug 'atimholt/spiffy_foldtext'

Plug 'plasticboy/vim-markdown'
Plug 'thinca/vim-ft-markdown_fold'

Plug 'junegunn/seoul256.vim'
Plug 'morhetz/gruvbox'
Plug 'romainl/Apprentice'
Plug 'trevordmiller/nova-vim'
Plug 'jeetsukumaran/vim-nefertiti'

call plug#end()

" }}}
" {{{ Colors
" ------------------------------------------------------------------------------

" syntax enable
"set termguicolors
set encoding=utf-8

let g:gruvbox_contrast_dark = 'soft'
let g:gruvbox_contrast_light = 'hard'
colorscheme seoul256-light


" }}}
" {{{ Settings
" ------------------------------------------------------------------------------

" Each machine has settings specific to it
source ~/code/private-dotfiles/vimrc

set backspace=eol
" set cursorline
set formatoptions+=ron1j formatprg=par\ -w78rq nojoinspaces
set foldlevelstart=99
set hidden confirm
set incsearch ignorecase gdefault
set laststatus=2 showcmd
set listchars=tab:»\ ,eol:¬,trail:¿,extends:→,precedes:←,nbsp:╌
set mouse=n
set scrolloff=0 sidescrolloff=5
set shortmess+=I
set spellfile=~/.vim/custom-dictionary.utf-8.add
set spelllang=en_us
set splitbelow splitright
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set undofile undodir=~/code/vimundo
set wildmenu wildmode=longest:full
set wrap linebreak breakindent
set wrapscan
set nostartofline
" set relativenumber

" Statusline setup
set statusline=              "set statusline to null
set statusline+=%f           "path to file
set statusline+=\ %m         "[modified] flag
set statusline+=\ %=         "left/right seperator
set statusline+=\ %y         "[filetype]
set statusline+=\ %l\,%c%V   "ruler
set statusline+=\ %P         "percentage through file

let mapleader = " "

" More sane defaults for , : ;
noremap ; :
noremap : ,
noremap , ;

" Escape codes
if has("nvim")
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
else
    " Switch from block-cursor to vertical-line-cursor when going into/out of insert mode
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    " Set proper italic escape-codes
    let &t_ZH="\e[3m"
    let &t_ZR="\e[23m"
endif


" Break undo before CTRL-U
inoremap <C-U> <C-G>u<C-U>

" Instead of using man for word lookups, use the OSX dictionary
nnoremap K :!open dict:///<cword><cr>

" Maintain selection on in/de-dent
xnoremap > >gv
xnoremap < <gv

" In Visual Mode I almost never want $ to select the newline
noremap $ g_

" Use 'gk' for k, unless a count is given. Useful for relative numbered lines.
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')

" Remap U to redo
nnoremap U <c-r>

" }}}
" {{{ Mappings
" ------------------------------------------------------------------------------

" Convert sentence junctions
nnoremap gc. r.wvUb
nnoremap gc, r,wvub
nnoremap gc; r;wvub
nnoremap gc- s -<esc>wvub
xnoremap gc. s.<esc>wvUb
xnoremap gc, s,<esc>wvub
xnoremap gc; s;<esc>wvub

" Mappings/Commands for 'clause-break' & 'clause-join'
vnoremap gcb :Break<cr>
nnoremap gcb V:Break<cr>
command! -range Break :'<,'>!clause-break
vnoremap gcj :Join<cr>
nnoremap gcj V:Join<cr>
command! -range Join :'<,'>!clause-join

" Quickly go to next/previous tab/buffer/window/quickfix/jump
nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>
nnoremap ]t :tabn<cr>
nnoremap [t :tabp<cr>
nnoremap [w <c-w>W
nnoremap ]w <c-w>w
nnoremap [q :cN<cr>
nnoremap ]q :cn<cr>
nnoremap [j <c-o>
nnoremap ]j <c-i>

nnoremap <c-o> <nop>
nnoremap <c-i> <nop>

" Move lines
nnoremap <c-k> :<c-u>execute 'move .' . '--' . v:count1<cr>
nnoremap <c-j> :<c-u>execute 'move .' . '+' . v:count1<cr>
xnoremap <c-k> :<c-u>execute "'<,'>move'<--" . v:count1<cr>gv
xnoremap <c-j> :<c-u>execute "'<,'>move'>+" . v:count1<cr>gv

" Delete autocompleted lists/comments on new lines
inoremap <c-l> <bs><bs><space><space>

" Toggle relativenumber
nnoremap <leader>n :set relativenumber!<cr>

" Quickly correct last spelling error
nnoremap z- [s1z=`^

" Select last pasted text
nnoremap gV `[v`]

" }}}
" {{{ Commands
" ------------------------------------------------------------------------------

" Never use a mapping when a command will do! This is Vim!
command! MM :call Markdown()
command! H1 :normal yypVr=
command! H2 :normal yypVr-
command! PP :set paste! | set paste?
command! SS :set spell! | set spell?
command! Src :source $MYVIMRC
command! Erc :e $MYVIMRC
command! WW :set wrap!
command! UT :UndotreeToggle
command! TODO vimgrep TODO % | cw
command! DELG vimgrep DELG % | cw
command! DATES vimgrep /\v<\d{4}-\d{2}-\d{2}>/j % | cw

" allow saving a sudo file if forgot to open as sudo
cmap w!! w !sudo tee % >/dev/null
" creates an alias (%%) to represent the directory of the current file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>

" }}}
" {{{ Functions
" ------------------------------------------------------------------------------

function! Markdown()
    setlocal spell filetype=markdown syntax=markdown
endfunction

function! InsertEnter()
    set timeoutlen=0
endfunction

function! InsertLeave()
    set timeoutlen=1000
endfunction

" }}}
" {{{ Autocommands
" ------------------------------------------------------------------------------

augroup custom_misc
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd Filetype rst setlocal foldmethod=expr
    autocmd FileType gitcommit setlocal spell
    autocmd BufWritePre /Volumes/secret_files/* setlocal noundofile
    autocmd InsertEnter * call InsertEnter()
    autocmd InsertLeave * call InsertLeave()
    autocmd BufRead,BufNewFile *.text,*.md call Markdown()
augroup END

" }}}
" {{{ Plugin Prefs
" ------------------------------------------------------------------------------

" FZF
    set rtp+=/usr/local/opt/fzf
    nnoremap <leader>l :BLines<cr>
    nnoremap <leader>L :Lines<cr>
    nnoremap <leader>f :Files<cr>
    nnoremap <leader>b :Buffers<cr>
    nnoremap <leader>h :Helptags<cr>
    nnoremap <leader>c :Colors<cr>
    " Insert mode completion
    imap <c-x><c-k> <plug>(fzf-complete-word)
    imap <c-x><c-f> <plug>(fzf-complete-path)
    imap <c-x><c-j> <plug>(fzf-complete-file-ag)
    imap <c-x><c-l> <plug>(fzf-complete-line)

    " Advanced customization using autoload functions
    inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" MARKDOWN
    " Disable vim-markdown's folding in favor of thinca/vim-ft-markdown_fold
    let g:vim_markdown_folding_disabled=1
    " Disable ge mapping
    map <Plug> <Plug>Markdown_EditUrlUnderCursor
    let g:vim_markdown_folding_style_pythonic = 1

" TABOO
    let g:taboo_tab_format=" %N: %f%m "
    let g:taboo_modified_tab_flag=" +"

" SPELLROTATE
    nmap <silent> zn <Plug>(SpellRotateForward)
    nmap <silent> zN <Plug>(SpellRotateBackward)
    vmap <silent> zn <Plug>(SpellRotateForwardV)
    vmap <silent> zN <Plug>(SpellRotateBackwardV)

" SPIFFY FOLDTEXT
    let g:SpiffyFoldtext_format = "%c{=}...%<%f{ }%l{+}"

" }}}
