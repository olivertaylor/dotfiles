" Plugins {{{
" ------------------------------------------------------------------------------
call plug#begin('~/.vim/plugged')
    Plug 'Shougo/unite.vim'
    Plug 'Shougo/unite-outline'
    Plug 'kopischke/unite-spell-suggest'
    Plug 'tpope/vim-rsi'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-commentary'
    Plug 'plasticboy/vim-markdown'
    Plug 'thinca/vim-ft-markdown_fold'
    Plug 'junegunn/vim-easy-align'
    Plug 'mbbill/undotree'
    Plug 'gerw/vim-HiLinkTrace'
    Plug 'gcmt/taboo.vim'
    Plug 'osyo-manga/unite-quickfix'
    Plug 'osyo-manga/vim-over'
    Plug 'easymotion/vim-easymotion'
    Plug 'w0ng/vim-hybrid'
    Plug 'wellle/visual-split.vim'
    Plug 'kshenoy/vim-signature'
    Plug 'wellle/vim-visual-star-search'
    Plug 'haya14busa/incsearch.vim'
call plug#end()
" }}}

" Settings {{{
" ------------------------------------------------------------------------------
syntax enable
colorscheme oliver.dark

" Each machine has settings spesific to it
source $DOT/vim/localvimrc

set backspace=start,indent,eol
set clipboard=unnamed
set encoding=utf-8
set formatoptions=tcrqn1j formatprg=par\ -w78rq nojoinspaces
set hidden
set incsearch ignorecase
set laststatus=2 showcmd
set listchars=tab:▸\ ,eol:¬,trail:◯,extends:→,precedes:←,nbsp:╌
set scrolloff=0 sidescrolloff=5
set shortmess+=I
set smartindent autoindent
set spellfile=~/.vim/custom-dictionary.utf-8.add
set spelllang=en_us
set splitbelow splitright
set statusline=%f\ %m\ %=\ %y\ %c\:%l\ %P
set statusline+=
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set thesaurus+=/Users/oliver/code/mthesaur.txt
set undofile undodir=~/code/vimundo
set wildmenu wildmode=list:longest
set wrap linebreak breakindent
" }}}

" MAPPINGS {{{
" ------------------------------------------------------------------------------

let mapleader = " "

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Swap key to enter Ex mode
" in Visual, Select, and Operator-pending modes:
noremap ; :
noremap : ;

" In Visual Mode I almost never want $ to select the newline
noremap $ g_

"  Make Y behave like D
nnoremap Y y$

" Break undo before CTRL-U
inoremap <C-U> <C-G>u<C-U>

" Instead of using man for word lookups, use the OSX dictionary
nnoremap K :!open dict:///<cword><cr>

" Convert sentence junctions
nnoremap gc. r.wvUb
nnoremap gc, r,wvub
nnoremap gc; r;wvub
nnoremap gc- s -<esc>wvub
xnoremap gc. s.<esc>wvUb
xnoremap gc, s,<esc>wvub
xnoremap gc; s;<esc>wvub

" Maintain selection on in/de-dent
xnoremap > >gv
xnoremap < <gv

" Quickly go to next/previous buffer
nnoremap gb :bnext<cr>
nnoremap gB :bNext<cr>

" make n/N always mean forward/backward search
" regardless of whether it was done with / or ?
nmap <silent> n /<cr>
nmap <silent> N ?<cr>
" }}}

" Commands {{{
" ------------------------------------------------------------------------------
command! Break :'<,'>!clause-break
command! Cdf :cd %:h<cr>
command! Dtrail :%s/\s\+$//
command! Join :'<,'>!clause-join
command! MM :call Markdown()
command! H1 :normal VUyypVr=
command! H2 :normal yypVr-
command! NN :set number!
command! NR :set relativenumber!
command! PP :set paste! | set paste?
command! SS :set spell! | set spell?
command! Src :source $MYVIMRC
command! Erc :e ~/code/dotfiles/vim/vimrc
command! WW :set wrap!
command! UT :UndotreeToggle

" allow saving a sudo file if forgot to open as sudo
    cmap w!! w !sudo tee % >/dev/null
" creates an alias (%%) to represent the directory of the current file
    cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>

" }}}

" LEADER mappings {{{
" ------------------------------------------------------------------------------

nnoremap <leader>e :Unite -buffer-name=edit -no-split -no-resize buffer file file/new directory/new<cr>
nnoremap <leader>u <nop>
nnoremap <leader>us :Unite -buffer-name=source -no-split -no-resize source<cr>
nnoremap <leader>ul :Unite -buffer-name=line -no-split -no-resize line<cr>
nnoremap <leader>uo :Unite -buffer-name=outline -no-split -no-resize outline<cr>
nnoremap <leader>ur :Unite -buffer-name=register -no-split -no-resize register<cr>
map <leader>s <Plug>(easymotion-s)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
" }}}

" FUNCTIONS {{{
" ------------------------------------------------------------------------------
function! Markdown()
    setlocal spell filetype=markdown syntax=markdown
endfunction
" }}}

" AUTOCOMMANDS {{{
" ------------------------------------------------------------------------------
augroup markdown
    autocmd!
    autocmd BufRead,BufNewFile *.text,*.md call Markdown()
augroup END

augroup custom_misc
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd BufWritePre /Volumes/secret_files/* setlocal noundofile
    autocmd InsertEnter * set timeoutlen=0 linebreak
    autocmd InsertLeave * set timeoutlen=3000 linebreak
augroup END
" }}}

" BETTER FOLDS {{{
" ------------------------------------------------------------------------------
function! MyFoldText()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
    return line . ' …' . repeat(" ",fillcharcount) . foldedlinecount . ' '
endfunction
set foldtext=MyFoldText()
" }}}

" PLUGIN PREFS {{{
" ------------------------------------------------------------------------
" UNITE
    " Start by setting some defaults
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    call unite#filters#sorter_default#use(['sorter_selecta'])

    let g:unite_source_history_yank_enable = 1

    augroup unite
        autocmd!
        autocmd FileType unite setlocal cursorline
    augroup END

    " shortcuts for calling Unite
    nnoremap = :Unite -buffer-name=spelling -no-split -no-resize spell_suggest<cr>

" MARKDOWN
    " Disable vim-markdown's folding in favor of thinca/vim-ft-markdown_fold
    let g:vim_markdown_folding_disabled=1

" GITGUTTER
    nmap [h <Plug>GitGutterPrevHunk
    nmap ]h <Plug>GitGutterNextHunk

" EASY ALIGN
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

" GOYO
    let g:goyo_width = 90
    let g:goyo_margin_top = 2
    let g:goyo_margin_bottom = 0

" TABOO
    let g:taboo_tab_format=" %N: %f%m "
    let g:taboo_modified_tab_flag=" +"

" Easy Motion
    let g:EasyMotion_smartcase = 1

" Incsearch
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
    map g/ <Plug>(incsearch-stay)
" }}}

" SNIPPETS {{{
" ------------------------------------------------------------------------
" Date: 2015-02-15
iabbrev <expr> dd strftime("%Y-%m-%d")
" Date: 16 February 2015
iabbrev <expr> ddate strftime("%d %B %Y")
" }}}
