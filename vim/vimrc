call plug#begin('~/.vim/plugged')
    Plug 'Shougo/unite.vim'
    Plug 'Shougo/unite-outline'
    Plug 'kopischke/unite-spell-suggest'
    Plug 'tpope/vim-surround'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'plasticboy/vim-markdown'
    Plug 'thinca/vim-ft-markdown_fold'
    Plug 'junegunn/goyo.vim'
    Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
    Plug 'airblade/vim-gitgutter',  { 'on': 'GitGutterToggle' }
    Plug 'mbbill/undotree',         { 'on': 'UndotreeToggle' }
    Plug 'gerw/vim-HiLinkTrace',    { 'on': 'HLT' }
    Plug 'gcmt/taboo.vim'
call plug#end()

syntax enable
colorscheme oliver.light

set autoread
set clipboard=unnamed
set encoding=utf-8
set foldlevelstart=99
set formatoptions=tcrqn1j formatprg=par\ -w78rq nojoinspaces
set hidden
set incsearch ignorecase
set laststatus=2 showcmd
set listchars=tab:▸\ ,eol:¬,trail:+,extends:>,precedes:<,nbsp:⌙
set nrformats+=alpha
set relativenumber
set scrolloff=1 sidescrolloff=5
set smartindent autoindent
set spellfile=~/.vim/custom-dictionary.utf-8.add
set spelllang=en_us
set splitbelow splitright
set statusline=%f%m%r%=\ %y
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set thesaurus+=/Users/oliver/code/mthesaur.txt
set undofile undodir=~/code/vimundo
set wildmenu wildmode=list:longest
set wrap linebreak breakindent

" MAPPINGS
" ------------------------------------------------------------------------------
" DISABLE THE ARROW KEYS - OH GOD...
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Yes, I use brackets for delete
inoremap [ <backspace>
cnoremap [ <backspace>
inoremap ] <delete>
cnoremap ] <delete>

" Make mode-switching easy
nnoremap <tab> <esc>
inoremap <tab> <esc>
vnoremap <tab> <esc>

" Make command-mode easier to enter
nnoremap ; :
vnoremap ; :
nnoremap , ;
vnoremap , ;

" Make moving around splits easier
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Go to '+/term ~/project/file'
vnoremap gsf "0y:e <c-r>0<cr>

" Easier buffer navigation
nnoremap gb :bn<cr>
nnoremap gB :bp<cr>

" Go to the end of the previous word
nnoremap - ge
nnoremap _ gE
vnoremap - ge
vnoremap _ gE

" Make Y like D or C
nnoremap Y y$

" Nice regex by default
nnoremap / /\v
vnoremap / /\v

" maintain selection on indentations
vnoremap > >gv
vnoremap < <gv

" Break undo before CTRL-U
inoremap <C-U> <C-G>u<C-U>

" Move lines
vnoremap <c-j> :m '>+1<cr>gv=gv
vnoremap <c-k> :m '<-2<cr>gv=gv

" Instead of using man for word lookups, use the OSX dictionary
nnoremap K :!open dict:///<cword><cr>

" COMMANDS
" ------------------------------------------------------------------------------
command! Cdf :cd %:h<cr>
command! Cl :set cursorline!
command! Dtrail :%s/\s\+$//
command! MM :call Markdown()
command! GG :GitGutterToggle
command! GY :Goyo
command! H1 :normal VUyypVr=
command! H2 :normal yypVr-
command! NN :set number!
command! NR :set relativenumber!
command! PP :set paste! | set paste?
command! SS :set spell! | set spell?
command! Src :source $MYVIMRC
command! Erc :e ~/code/dotfiles/vim/vimrc
command! WW :set wrap!
command! Wbd :w | :bd
command! UT :UndotreeToggle

" allow saving a sudo file if forgot to open as sudo
    cmap w!! w !sudo tee % >/dev/null
" creates an alias (%%) to represent the directory of the current file
    cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>

" FUNCTION
" ------------------------------------------------------------------------------
function! Markdown()
    setlocal spell
    setlocal filetype=markdown "triggers thinca/vim-ft-markdown_fold for folding,
    setlocal syntax=mkd "triggers vim-markdown's syntax, which is MUCH better
endfunction

" AUTOCOMMANDS
" ------------------------------------------------------------------------------
augroup markdown
    autocmd!
    autocmd BufRead,BufNewFile *.text call Markdown()
    autocmd BufRead,BufNewFile *.md   call Markdown()
augroup END

" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
    autocmd!
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

augroup custom_misc
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd BufRead,BufNewFile *.fountain setlocal filetype=fountain
    " Don't write undofiles for secret stuff
    autocmd BufWritePre /Volumes/secret_files/* setlocal noundofile
    " Super fast exiting from insert mode. Note that with this, you can't
    " possibly use mappings that start with <esc> *in insert mode*, since vim
    " won't wait for you to press other keys.
    autocmd InsertEnter * set timeoutlen=0 linebreak
    autocmd InsertLeave * set timeoutlen=800 linebreak
augroup END

" BETTER FOLDS
" ------------------------------------------------------------------------------
" better text folding from http://github.com/dphase/dphase-vim
set fillchars=fold:\∙
function! NeatFoldText()
    let line = ' ' . substitute(getline(v:foldstart), '^\s*\("\|#\|//\|/\)\?\s*\|\s*\("\|#\)\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = ' ' . printf("%10s", lines_count . ' lines') . ' '
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart('∙' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" http://vim.wikia.com/wiki/Customize_text_for_closed_folds
" https://bitbucket.org/atimholt/spiffy_foldtext

" PLUGIN PREFS
" ------------------------------------------------------------------------
" UNITE
    " Start by setting some defaults
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    call unite#filters#sorter_default#use(['sorter_selecta'])

    " shortcuts for calling Unite
    nnoremap = :Unite -no-split -no-resize spell_suggest<cr>
    nnoremap <leader>e :Unite -no-split -no-resize buffer file file/new directory/new<cr>
    nnoremap <leader>uh :Unite -no-split -no-resize help<cr>
    nnoremap <leader>us :Unite -no-split -no-resize source<cr>
    nnoremap <leader>ul :Unite -no-split -no-resize line<cr>
    nnoremap <leader>uo :Unite -no-split -no-resize outline<cr>
    nnoremap <leader>ur :Unite -no-split -no-resize register<cr>

    " Custom mappings for the unite buffer
    autocmd FileType unite call s:unite_settings()
    function! s:unite_settings()
        " Enable navigation with control-n and control-p in insert mode
        imap <buffer> <C-n>   <Plug>(unite_select_next_line)
        imap <buffer> <C-p>   <Plug>(unite_select_previous_line)
    endfunction

" MARKDOWN
    " Disable vim-markdown's folding in favor of thinca/vim-ft-markdown_fold
    let g:vim_markdown_folding_disabled=1

" GITGUTTER
    let g:gitgutter_enabled = 0
    nmap [h <Plug>GitGutterPrevHunk
    nmap ]h <Plug>GitGutterNextHunk

" EASY ALIGN
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    vmap <Enter> <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

" GOYO
    let g:goyo_width = 90
    let g:goyo_margin_top = 2
    let g:goyo_margin_bottom = 0

" SNIPPETS
" ------------------------------------------------------------------------
" Date: 2015-02-15
iabbrev <expr> dd strftime("%Y-%m-%d")
" Date: 16 February 2015
iabbrev <expr> ddate strftime("%d %B %Y")

" IWR
    iabbrev xcl CLARISSA
    iabbrev xja JACK
    iabbrev xju JULIAN
    iabbrev xpe PENNY
    iabbrev xmi MILTON
