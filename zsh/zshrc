# TAKE NOTE!!
# Everything in this file is only loaded for interactive shells.
# For non-interactive shells, like those used by emacs & vim, use 'zshenv'

# {{{ OPTIONS
# ----------------------------------------------------------------------------

export DOT=~/home/dot

export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
setopt HIST_IGNORE_DUPS           # Ignore duplication command history list
setopt SHARE_HISTORY              # Share history data between sessions
setopt APPEND_HISTORY             # New sessions append history data rather than overwrite
setopt EXTENDED_HISTORY           # save each command’s beginning timestamp
HISTFILE=~/.zsh_history
SAVEHIST=10000
HISTSIZE=10000
setopt NOCLOBBER                  # Disallow overwriting of files using >
setopt complete_aliases           # Dont expand aliases _before_ completion has finished
set    completion-ignore-case on  # Ignore case for tab completion
set    show-all-if-ambiguous on   # Show all suggestions after pressing tab once instead of twice
bindkey -e                        # Use emacs bindings
autoload -U compinit
compinit -C

## case-insensitive (all),partial-word and then substring completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' \
    'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

bindkey "^K" history-beginning-search-backward
bindkey "^J" history-beginning-search-forward

export EDITOR=vim
export BORG_REMOTE_PATH=/usr/local/bin/borg1/borg1

# Automatically quote URLs
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# }}}
# {{{ PROMPT
# ----------------------------------------------------------------------------

setopt prompt_subst

# Setup the variables used in the prompt
if [ -n "$SSH_CLIENT" ]; then
    local myUsermachine='%n@%m:'
fi

ExitStatus='%(?..%F{red}✗ %f)'
myDir='[%~]'
myBackgroundjobs='%(1j. (%j jobs).)'
myPrompt='⑆ '

# Build the Prompt
PROMPT='${ExitStatus}${myUsermachine}${myDir}${myBackgroundjobs} ${myPrompt}'

# }}}
# {{{ ALIASES
# ----------------------------------------------------------------------------
alias evrc="vim $DOT/vim/vimrc"
alias ezrc="vim $DOT/zsh/zshrc && source $DOT/zsh/zshrc"
alias szrc="source $DOT/zsh/zshrc"

alias ,gs="git status -sb"
alias ,gl="git log --all --graph --pretty=format:'%C(blue)%cd%C(reset) %C(yellow)%h%C(reset) %s%C(red)%d%C(reset)' --abbrev-commit --date=short --branches --tags --remotes"
alias ,gd="git diff -b"
alias ,ga="git add"
alias ,gc="git commit"

alias rm="rm -i"
alias mv="mv -i"
alias l='exa -1'
alias la="exa -la"
alias ..="cd .."
alias ax="chmod a+x"
alias batt="pmset -g batt"
alias server='python -m http.server 8000'
alias unquarantine='xattr -d com.apple.quarantine'
alias pbp="pbpaste"
alias pbc="pbcopy"
alias bbe="bbedit"
alias python=python3

# TMUX
alias ,tmn='tmux new -s `basename $PWD`'
alias ,tma='tmux attach -t '
alias ,tml='tmux list-sessions'
alias ,tmk='tmux kill-session -t '
,tmh() {
echo "
    tmn - New tmux session
    tma - Attach tmux session
    tml - List tmux sessions
    tmk - Kill tmux session
" }

# System Reports
# I use these commands to search for background processes I don't want
alias ,lsdeamons='ls -al /Library/Launch* ~/Library/Launch*'
alias ,lsrundeamons='launchctl list | grep -v "com.apple." | tail -n+2 | sort -k 3'
alias ,lsrunsysdeamons='sudo launchctl list | grep -v "com.apple." | tail -n+2 | sort -k 3'
alias ,lskext='kextstat | grep -v com.apple'
alias ,lsmyps='ps -ax | grep -v "/System\|/Applications\|/usr\|/sbin\|ttys00[0-9]"'

# }}}
# {{{ FUNCTIONS
# ----------------------------------------------------------------------------

# did file - listing things you've done
did (){
    echo "$(ddate): $@" >> ~/home/files/did.txt
}

myip() { (awk '{print $2}' <(ifconfig en0 | grep 'inet ')); }

size(){
    if test -z $1; then
        echo "File size. USAGE: size file" >&2
        return 1
    else
        du -sh "$1"
        return 0
    fi
}

rt(){
    if test -z $1; then
        echo "Move file to trash. USAGE: rt file" >&2
        return 1
    else
        mv $1 ~/.Trash;
        return 0
    fi
}

cfp(){
    if test -z $1; then
        echo "Copy file path. USAGE: cfp file" >&2
        return 1
    else
        echo "$PWD/$1" | pbcopy && echo "File-Path is on the clipboard"
        return 0
    fi
}

function makepdf(){
    if test -z $3; then
        echo "USAGE: makepdf format /source /destination" >&2
        return 1
    else
        pandoc -f $1+smart -t html < $2 | prince -s ~/cloud/src/print_css/print.css - -o $3
        return 0
    fi
}

# }}}
# {{{ Project Management System
# ----------------------------------------------------------------------------

fzf-launcher() {
    eval "$(~/home/src/launcher/launcher | fzf)"
}
alias ll=fzf-launcher

# Generic function that searches for "TODO" in the paths given
function td() {
    if test -z $1; then
        # if no arguments
        echo "ERROR: requires argument" >&2
        return 1
    elif test -z $2; then
        # if there's only one argument, this pattern
        ag TODO $1
        return 0
    else
        # if more than one argument, this pattern
        ag TODO $*
        return 0
    fi
}

# }}}
# {{{ FZF OPTIONS / FUNCTIONS
# ----------------------------------------------------------------------------

source /usr/local/opt/fzf/shell/completion.zsh
source /usr/local/opt/fzf/shell/key-bindings.zsh

export FZF_DEFAULT_OPTS="--color=light --height 60%"
export FZF_CTRL_T_OPTS="--preview '(cat {} || tree -C {}) 2> /dev/null | head -200'"
# don't forget to set "use option key as meta" for this to work:
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden --bind '?:toggle-preview'"
export FZF_FS_OPENER=vim

# fshow - git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# v - open files in ~/.viminfo
v() {
  local files
  files=$(grep '^>' ~/.viminfo | cut -c3- |
          while read line; do
            [ -f "${line/\~/$HOME}" ] && echo "$line"
          done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
}

# This stuff has to be last
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
source ~/home/opt/zsh-interactive-cd/zsh-interactive-cd.plugin.zsh

# }}}
